//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
public class JumpingGoblinMoveStrategy : GoblinMoveStrategy
{
    public static readonly HashSet<string> TargetJumpTags = new HashSet<string>(new string[] { "ShootingObject", "DestroyableObject" });
    public static new JumpingGoblinMoveStrategy Instance()
    {
        if (s_strategy == null)
                s_strategy = new JumpingGoblinMoveStrategy();
        return s_strategy;
    }
    static JumpingGoblinMoveStrategy s_strategy;
    protected JumpingGoblinMoveStrategy()
    {
    }

    public override void SteerOther(BasicSteering controller)
    {
        GoblinSteering steering = controller as GoblinSteering;
        if (steering.SurfaceContact.normal == Vector2.zero)
        {
            controller.SetStrategy(JumpingGoblinFloatStrategy.Instance());
        }

        GoblinCombatStrategy.CheckTargets(steering,2);
        if (steering.Targets.Count != 0)
        {
            GameObject mainTarget = steering.Targets[0];
            if (mainTarget.tag == "Enemy")
            {
                if (mainTarget.GetComponent<PhysicsObject>().GetExtents().min.x - steering.GetComponent<PhysicsObject>().GetExtents().max.x < 0.1)
                {
                    steering.Stopped = true;
                }
            }
            else if (TargetJumpTags.Contains(mainTarget.tag) && mainTarget.GetComponent<PhysicsObject>().GetExtents().min.x - steering.GetComponent<PhysicsObject>().GetExtents().max.x > 1.5)
            {
                float height = mainTarget.GetComponent<PhysicsObject>().FindMaxHeight() - steering.GetComponent<PhysicsObject>().GetExtents().min.y;
                controller.GetComponent<JumpingGoblinLocomotion>().Jump(new Vector2(height / 4, height));
            }
            else
            {
                controller.SetStrategy(JumpingGoblinCombatStrategy.Instance());
            }
        }
        

    }
}

