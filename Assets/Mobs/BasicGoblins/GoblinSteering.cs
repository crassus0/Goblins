//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
public class GoblinSteering : BasicSteering
{
    public ContactPoint2D SurfaceContact { get; set; }
    public List<GameObject> Targets { get; set; }
    HashSet<GameObject> m_terrain=new HashSet<GameObject>();
	protected override void Start()
	{
        Targets = new List<GameObject>();
        SetStrategy(new GoblinFloatStartegy());
	}
    protected virtual void OnCollisionEnter2D(Collision2D collision)
    {
        Debug.DrawRay(collision.contacts[0].point, transform.right, Color.green);
        if (Physics2D.Raycast(collision.contacts[collision.contacts.Length - 1].point, -transform.up, 0.01f).collider != null)
        {
            SurfaceContact = collision.contacts[collision.contacts.Length - 1];
            if (!m_terrain.Contains(collision.gameObject))
                m_terrain.Add(collision.gameObject);
            if (Targets.Count == 0)
                SetStrategy(new GoblinMoveStrategy());
        }
        else
        {
            
            if (Physics2D.Raycast(collision.contacts[0].point, transform.right, 0.1f).collider == collision.collider)
            {
                SetStrategy(new GoblnCombatStrategy());
                if (!Targets.Contains(collision.collider.gameObject))
                    Targets.Add(collision.collider.gameObject);
            }
        }
    }
    protected virtual void OnCollisionExit2D(Collision2D collider)
    {
        
       m_terrain.Remove(collider.gameObject);
       if (m_terrain.Count == 0)
       {
           SetStrategy(new GoblinFloatStartegy());
           SurfaceContact = new ContactPoint2D();
       }
       RemoveTarget(collider.collider.gameObject);
    }
    public void RemoveTarget(GameObject target)
    {
        Targets.Remove(target);
        if(Targets.Count==0)
        {
            SetStrategy(new GoblinMoveStrategy());
        }
    }
    protected virtual void OnCollisionStay2D(Collision2D collision)
    {
        //Debug.DrawRay(collision.contacts[collision.contacts.Length - 1].point, -transform.up, Color.blue);
        ContactPoint2D realContact = new ContactPoint2D();
        foreach(ContactPoint2D contact in collision.contacts)
        {
            if (Physics2D.Raycast(contact.point, -transform.up, 0.1f).collider != null)
                realContact = contact;
        }
        if (realContact.normal!=default(Vector2) )
        {
            if (!m_terrain.Contains(collision.gameObject))
            {
                m_terrain.Add(collision.gameObject);
                if (Targets.Count == 0)
                    SetStrategy(new GoblinMoveStrategy());
            }
            SurfaceContact = realContact;
        }
        else
        {
            m_terrain.Remove(collision.collider.gameObject);
            if (m_terrain.Count == 0)
            {
                SetStrategy(new GoblinFloatStartegy());
                SurfaceContact = collision.contacts[collision.contacts.Length - 1];
            }
        }
    }
   
}

