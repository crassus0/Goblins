//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
public class GoblinSteering : BasicSteering
{
    public ContactPoint2D SurfaceContact { get; set; }
    public List<GameObject> Targets { get; set; }
    HashSet<GameObject> m_terrain=new HashSet<GameObject>();
    float m_colliderRatio;
	protected override void Start()
	{
        Level.CurrentLevel.MobSpawned();
        m_colliderRatio = GetComponent<Collider2D>().bounds.extents.y / GetComponent<Collider2D>().bounds.extents.x;
        SurfaceContact = new ContactPoint2D();
        //SurfaceContact.normal = Vector2.up;
        Targets = new List<GameObject>();
        SetStrategy(new GoblinFloatStartegy());
	}
    protected void OnCollisionEnter2D(Collision2D collision)
    {
        foreach (ContactPoint2D point in collision.contacts)
        {


            Vector2 hitDirection = transform.InverseTransformDirection(point.point - (Vector2)transform.position);
            float hitRatio = Mathf.Abs(hitDirection.y / hitDirection.x);
            if (hitRatio < m_colliderRatio && hitDirection.x > 0)
            {
                SetStrategy(new GoblnCombatStrategy());
                if (!Targets.Contains(collision.collider.gameObject))
                    Targets.Add(collision.collider.gameObject);
                break;
            }

            if (hitRatio > m_colliderRatio && hitDirection.y < 0)
            {
                SurfaceContact = point;
                if (!m_terrain.Contains(collision.gameObject))
                    m_terrain.Add(collision.gameObject);
                if (Targets.Count == 0)
                    SetStrategy(new GoblinMoveStrategy());
                break;
            }
        }
    }

    

    protected void OnCollisionExit2D(Collision2D collision)
    {
       RemoveTarget(collision.collider.gameObject);
       m_terrain.Remove(collision.gameObject);
       if (m_terrain.Count == 0)
       {
           SetStrategy(new GoblinFloatStartegy());
           SurfaceContact = new ContactPoint2D();
       }
       
    }
    public void RemoveTarget(GameObject target)
    {
        Targets.Remove(target);
        if(Targets.Count==0)
        {
            SetStrategy(new GoblinMoveStrategy());
        }
    }
    protected void OnCollisionStay2D(Collision2D collision)
    {
        Debug.DrawRay(collision.contacts[collision.contacts.Length - 1].point, -transform.up*0.01f, Color.red); 
        ContactPoint2D realContact = new ContactPoint2D();
        foreach(ContactPoint2D contact in collision.contacts)
        {
            if (Physics2D.Raycast(contact.point, -transform.up, 0.1f).collider != null)
                realContact = contact;
        }
        if (realContact.normal!=default(Vector2) )
        {
            if (!m_terrain.Contains(collision.gameObject))
            {
                m_terrain.Add(collision.gameObject);
                if (Targets.Count == 0)
                    SetStrategy(new GoblinMoveStrategy());
            }
            SurfaceContact = realContact;
        }
        else
        {
            m_terrain.Remove(collision.collider.gameObject);
            if (m_terrain.Count == 0)
            {
                SetStrategy(new GoblinFloatStartegy());
                SurfaceContact = collision.contacts[collision.contacts.Length - 1];
            }
        }
    }
    void Update()
    {
    }
}

