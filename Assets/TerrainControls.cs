//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
[RequireComponent(typeof(EdgeCollider2D))]
public class TerrainControls : PhysicsObject
{
    
    static List<TerrainControls> s_terrainComponents= new List<TerrainControls>();
    public static ScreenBounds GetScreenBounds()
    {
        const float bound = 0f;
        ScreenBounds bounds = new ScreenBounds();
        TerrainControls element = s_terrainComponents[0];
        bounds.left = element.transform.position.x+bound;
        bounds.bottom = element.transform.position.y+bound;
        bounds.top = element.transform.position.x+element.GetComponent<TerrainEditor2D>().Height-bound;
        element = s_terrainComponents[s_terrainComponents.Count - 1];
        bounds.right = element.transform.position.x + element.GetComponent<TerrainEditor2D>().Width-bound;
        return bounds;
    }
    public static bool OnTerrain(Vector2 point)
    {
        Vector2 edgePoint;
        for(int i=0; i<s_terrainComponents.Count; i++)
        {
            EdgeCollider2D collider = s_terrainComponents[i].GetComponent<Collider2D>() as EdgeCollider2D;
            float xOffset = s_terrainComponents[i].transform.position.x;
            edgePoint = collider.points.FirstOrDefault(x => x.x+xOffset >= point.x);
            if(edgePoint!=default(Vector2))
            {
                return edgePoint.y >= point.y;
            }
        }
        return true;
    }
     
    public static float TerrainHeight(float xCoord)
    {
        Vector2 edgePoint;
        for (int i = 0; i < s_terrainComponents.Count; i++)
        {
            EdgeCollider2D collider = s_terrainComponents[i].GetComponent<Collider2D>() as EdgeCollider2D;
            float xOffset = s_terrainComponents[i].transform.position.x;
            edgePoint = collider.points.FirstOrDefault(x => x.x + xOffset >= xCoord);
            if (edgePoint != default(Vector2))
                return edgePoint.y;

        }
        return 0;
    }
    protected override void Start()
    {
        if (!s_terrainComponents.Contains(this))
            s_terrainComponents.Add(this);
        s_terrainComponents=s_terrainComponents.OrderBy(x => x.transform.position.x).ToList();
    }
	protected override void OnCollisionEnter2D(Collision2D collision)
	{
	}

	protected override void OnCollisionExit2D(Collision2D collision)
	{
	}

	public override void OnHit(HitInfo info)
	{
	}

	protected override void FixedUpdate()
	{
	}
    public override int DestructionPrice
    {
        get { return 0; }
    }
}

